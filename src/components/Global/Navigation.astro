---
// Define the navigation items
const navItems = [
  { text: "Inicio", href: "/" },
  { text: "Nosotros", href: "/about-us" },
  { text: "Mentores", href: "/staff" },
  { text: "Eventos", href: "/events" },
  { text: "Recursos", href: "/blog" },
  { text: "Soy nuevo", href: "/im-new" },
  { text: "Contacto", href: "/contact" },
  { text: "Donar", href: "/giving" },
  { text: "", href: "/sermons" },
  { text: "", href: "/ministries" },
];

// Get the current URL path to highlight the active link
const currentPath = Astro.url.pathname;

import { IoLogoWhatsapp } from "react-icons/io";
---

<!-- Desktop Navigation -->
<nav class="hidden lg:block">
  <ul class="flex items-center space-x-6">
    {
      navItems.map((item) => {
        const isActive = currentPath === item.href || 
                         (item.href !== "/" && currentPath.startsWith(item.href));
        
        return (
          <li>
            <a
              href={item.href}
              class={`text-base font-medium transition-colors hover:text-primary-600 ${
                isActive ? "text-primary-600" : "text-gray-700"
              }`}
              aria-current={isActive ? "page" : undefined}
            >
              {item.text}
            </a>
          </li>
        );
      })
    }
    
    <!-- GitHub Icon -->
    <li>
      <a
        href="https://wa.me/message/3KXK5UW2PPXVF1"
        target="_blank"
        rel="noopener noreferrer"
        class="text-green-600 hover:text-primary-600 transition-colors p-2 text-2xl"
        aria-label="View on GitHub"
      >
      <IoLogoWhatsapp />
      </a>
    </li>
  </ul>
</nav>

<!-- Mobile Menu Button -->
<button
  id="mobile-menu-button"
  class="lg:hidden p-2 text-gray-700 hover:text-primary-600 focus:outline-none transition-colors relative"
  aria-label="Toggle Menu"
  aria-expanded="false"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
  </svg>
</button>

<!-- Mobile Menu Dropdown - Compact & Clean -->
<div
  id="mobile-menu"
  class="absolute top-full left-0 right-0 bg-white shadow-lg border-t border-gray-100 transform scale-y-0 origin-top transition-transform duration-200 ease-out lg:hidden z-50"
  role="menu"
  aria-labelledby="mobile-menu-button"
>
  <!-- Navigation Links in Grid -->
  <div class="px-4 py-6">
    <div class="grid grid-cols-2 gap-3">
      {
        navItems.map((item) => {
          const isActive = currentPath === item.href || 
                           (item.href !== "/" && currentPath.startsWith(item.href));
          
          return (
            <a
              href={item.href}
              class={`block px-4 py-3 text-sm font-medium rounded-lg transition-colors text-center ${
                isActive 
                  ? "bg-primary-50 text-primary-600 border border-primary-200" 
                  : "text-gray-700 hover:bg-gray-50 hover:text-primary-600 border border-transparent"
              }`}
              role="menuitem"
              aria-current={isActive ? "page" : undefined}
            >
              {item.text}
            </a>
          );
        })
      }
    </div>
    
    <!-- GitHub Link -->
    <div class="mt-4 pt-4 border-t border-gray-100">
      <a
        href="https://github.com/MauCariApa-com/maucariapacom-church-starter"
        target="_blank"
        rel="noopener noreferrer"
        class="flex items-center justify-center px-4 py-3 text-sm font-medium text-gray-600 hover:text-primary-600 transition-colors rounded-lg hover:bg-gray-50"
        role="menuitem"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
        </svg>
        View on GitHub
      </a>
    </div>
  </div>
</div>

<style>
  /* Mobile menu button animation */
  #mobile-menu-button:hover svg {
    transform: scale(1.1);
  }
  
  #mobile-menu-button svg {
    transition: transform 0.2s ease;
  }
  
  /* Mobile menu show/hide states */
  #mobile-menu.show {
    transform: scaleY(1);
  }
  
  /* Smooth hover effects */
  #mobile-menu a {
    transition: all 0.15s ease;
  }
  
  /* Active state styling */
  #mobile-menu a[aria-current="page"] {
    font-weight: 600;
  }
</style>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    let isMenuOpen = false;
    
    // Function to toggle mobile menu
    const toggleMobileMenu = () => {
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Show menu
        mobileMenu.classList.add('show');
        mobileMenuButton.setAttribute('aria-expanded', 'true');
      } else {
        // Hide menu
        mobileMenu.classList.remove('show');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
      }
    };
    
    // Event listeners
    mobileMenuButton?.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (isMenuOpen && !mobileMenu.contains(e.target) && !mobileMenuButton.contains(e.target)) {
        toggleMobileMenu();
      }
    });
    
    // Close menu when clicking a navigation link
    const navLinks = mobileMenu?.querySelectorAll('a[href^="/"]');
    navLinks?.forEach(link => {
      link.addEventListener('click', () => {
        if (isMenuOpen) {
          setTimeout(() => toggleMobileMenu(), 100);
        }
      });
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMobileMenu();
      }
    });
    
    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024 && isMenuOpen) {
        toggleMobileMenu();
      }
    });
  });
</script>